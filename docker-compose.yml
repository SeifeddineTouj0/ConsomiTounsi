version: '3.8'
name: consommi-tounsi
services:

  # Template for adding a new microservice database
  # Replace <microservice-name> with the actual name of the microservice
  # <db-image> with the appropriate database image (e.g., mysql:8.0, postgres:13, etc.)
  # <db-name> with the desired database name

  # <microservice-name>-db:
  #   image: <db-image>
  #   container_name: <microservice-name>-db
  #   environment:
  #     MYSQL_ALLOW_EMPTY_PASSWORD: 1  # Adjust environment variables as needed for the chosen database
  #     MYSQL_DATABASE: <db-name>
  #   networks:
  #     - microservices-network
  #   healthcheck:
  #     test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]  # Adjust healthcheck command for the chosen database
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 30s


  # Template for adding a new microservice
  # Replace <microservice-name> with the actual name of the microservice
  # <microservice-image> with the appropriate Docker image for the microservice

  # <microservice-name>:
  #   image: <microservice-image>:latest
  #   build: ./path/to/<microservice-name>
  #   container_name: <microservice-name>
  #   environment:
  #     SPRING_CLOUD_CONFIG_URI: http://config-server:8888
  #     SPRING_CONFIG_IMPORT: "configserver:"
  #     # Add additional environment variables as needed
  #  ports:
  #    - "<port>:<port>"
  #   networks:
  #     - microservices-network
  #   depends_on:
  #     config-server:
  #       condition: service_healthy
  #     # Add additional dependencies as needed
  #   healthcheck:
  #     test: [ "CMD", "curl", "-f", "http://localhost:<port>/actuator/health" ]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 5
  #     start_period: 40s
  users-db:
    image: mysql:8.0
    container_name: users-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_DATABASE: users_db
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  boutique-db:
    image: mysql:8.0
    container_name: boutique-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_DATABASE: boutique_db
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  products-db:
    image: mysql:8.0
    container_name: products-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_DATABASE: products_db
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  users-microservice:
    image: users-microservice:latest
    build: ./users
    container_name: users-microservice
    environment:
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CONFIG_IMPORT: "configserver:"
    ports:
      - "8090:8090"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      users-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s



  boutique-microservice:
    image: boutique-microservice:latest
    build: ./boutiques
    container_name: boutique-microservice
    environment:
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CONFIG_IMPORT: "configserver:"
    ports:
      - "8082:8082"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      boutique-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: on-failure

  products-microservice:
    image: products-microservice:latest
    build: ./produits
    container_name: products-microservice
    environment:
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CONFIG_IMPORT: "configserver:"
    ports:
      - "8091:8091"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      products-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: on-failure

  ventes-db:
    image: mysql:8.0
    container_name: ventes-db
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 1
      MYSQL_DATABASE: ventes_db
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  ventes-microservice:
    image: ventes-microservice:latest
    build: ./ventes
    container_name: ventes-microservice
    environment:
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CONFIG_IMPORT: "configserver:"
    ports:
      - "8081:8081"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      ventes-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    restart: on-failure


  cagnottes-microservice:
    image: cagnottes-microservice:latest
    build: ./cagnottes
    container_name: cagnottes-microservice
    environment:
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CONFIG_IMPORT: "configserver:"
    ports:
      - "8089:8089"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
      cagnottes-db:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8089/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  cagnottes-db:
    image: mysql:8.0
    container_name: cagnottes-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cagnottes_db
    networks:
      - microservices-network
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    build: ./eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-network
    depends_on:
      config-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "--retry", "6", "--retry-delay", "5", "--max-time", "5", "http://localhost:8761/actuator/health" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  config-server:
    image: config-server:latest
    container_name: config-server
    build: ./config-server
    networks:
      - microservices-network
    ports:
      - "8888:8888"
    healthcheck:
      test: [ "CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8888/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s
    environment:
      - SPRING_CLOUD_CONFIG_SERVER_GIT_URI=https://github.com/SeifeddineTouj0/ConsomiTounsi.git
      - SPRING_CLOUD_CONFIG_SERVER_GIT_SEARCH_PATHS=config-files
      - SPRING_CLOUD_CONFIG_SERVER_GIT_CLONE_ON_START=true


  #  api-gateway:
  #    image: api-gateway-server:latest
  #    container_name: api-gateway-server
  #    build: ./api-gateway
  #    ports:
  #      - "8181:8181"
  #    environment:
  #      - EUREKA_SERVER_URI=http://eureka-server:8761/eureka
  #      - CONFIG_SERVER_URI=http://config-server:8888
  #      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
  #      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
  #    networks:
  #      - microservices-network
  #    depends_on:
  #      config-server:
  #        condition: service_healthy
  #      eureka-server:
  #        condition: service_healthy
  #    healthcheck:
  #      test: [ "CMD", "curl", "-f", "http://localhost:8181/actuator/health" ]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5
  #      start_period: 40s

  axon-server:
    image: axoniq/axonserver
    container_name: axon-server
    ports:
      - "8024:8024"
      - "8124:8124"
    environment:
      - "AXONIQ_AXONSERVER_STANDALONE=True"
    networks:
      - microservices-network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - microservices-network
    depends_on:
      - boutique-microservice
      - ventes-microservice

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - microservices-network
    depends_on:
      - prometheus

#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    ports:
#      - "9411:9411"
#    networks:
#      - microservices-network

networks:
  microservices-network:
    driver: bridge
